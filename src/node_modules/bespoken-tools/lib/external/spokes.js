"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const request_promise_native_1 = require("request-promise-native");
const logging_helper_1 = require("../core/logging-helper");
const Logger = "SPOKES-CLIENT";
class SpokesClient {
    constructor(id, secretKey) {
        this.id = id;
        this.secretKey = secretKey;
        this._secretKey = secretKey;
        this._id = id;
    }
    verifyUUIDisNew() {
        return __awaiter(this, void 0, Promise, function* () {
            const options = {
                uri: `https://api.bespoken.link/pipe/${this._secretKey}`,
                headers: {
                    "x-access-token": "4772616365-46696f72656c6c61",
                },
                body: {},
                json: true
            };
            try {
                yield request_promise_native_1.get(options);
            }
            catch (error) {
                if (error.statusCode && error.statusCode !== 404) {
                    logging_helper_1.LoggingHelper.error(Logger, `Error while verifying id: ${error.message}`);
                    throw error;
                }
                return true;
            }
            return false;
        });
    }
    ;
    createPipe() {
        return __awaiter(this, void 0, Promise, function* () {
            const options = {
                uri: "https://api.bespoken.link/pipe",
                headers: {
                    "x-access-token": "4772616365-46696f72656c6c61",
                },
                body: {
                    uuid: this._secretKey,
                    diagnosticsKey: this._secretKey,
                    endPoint: {
                        name: this._id,
                    },
                    path: "/",
                    pipeType: "string",
                    proxy: false,
                },
                json: true
            };
            return request_promise_native_1.post(options);
        });
    }
}
exports.SpokesClient = SpokesClient;
//# sourceMappingURL=spokes.js.map